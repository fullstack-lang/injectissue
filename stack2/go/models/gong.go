// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Bars           map[*Bar]struct{}
	Bars_mapString map[string]*Bar

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitBar(bar *Bar)
	CheckoutBar(bar *Bar)
	GetLastCommitNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Bars:           make(map[*Bar]struct{}, 0),
	Bars_mapString: make(map[string]*Bar, 0),

	// end of insertion point
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getBarOrderedStructWithNameField() []*Bar {
	// have alphabetical order generation
	barOrdered := []*Bar{}
	for bar := range stage.Bars {
		barOrdered = append(barOrdered, bar)
	}
	sort.Slice(barOrdered[:], func(i, j int) bool {
		return barOrdered[i].Name < barOrdered[j].Name
	})
	return barOrdered
}

// Stage puts bar to the model stage
func (bar *Bar) Stage() *Bar {
	Stage.Bars[bar] = __member
	Stage.Bars_mapString[bar.Name] = bar

	return bar
}

// Unstage removes bar off the model stage
func (bar *Bar) Unstage() *Bar {
	delete(Stage.Bars, bar)
	delete(Stage.Bars_mapString, bar.Name)
	return bar
}

// commit bar to the back repo (if it is already staged)
func (bar *Bar) Commit() *Bar {
	if _, ok := Stage.Bars[bar]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitBar(bar)
		}
	}
	return bar
}

// Checkout bar to the back repo (if it is already staged)
func (bar *Bar) Checkout() *Bar {
	if _, ok := Stage.Bars[bar]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutBar(bar)
		}
	}
	return bar
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of bar to the model stage
func (bar *Bar) StageCopy() *Bar {
	_bar := new(Bar)
	*_bar = *bar
	_bar.Stage()
	return _bar
}

// StageAndCommit appends bar to the model stage and commit to the orm repo
func (bar *Bar) StageAndCommit() *Bar {
	bar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBar(bar)
	}
	return bar
}

// DeleteStageAndCommit appends bar to the model stage and commit to the orm repo
func (bar *Bar) DeleteStageAndCommit() *Bar {
	bar.Unstage()
	DeleteORMBar(bar)
	return bar
}

// StageCopyAndCommit appends a copy of bar to the model stage and commit to the orm repo
func (bar *Bar) StageCopyAndCommit() *Bar {
	_bar := new(Bar)
	*_bar = *bar
	_bar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBar(bar)
	}
	return _bar
}

// CreateORMBar enables dynamic staging of a Bar instance
func CreateORMBar(bar *Bar) {
	bar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBar(bar)
	}
}

// DeleteORMBar enables dynamic staging of a Bar instance
func DeleteORMBar(bar *Bar) {
	bar.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMBar(bar)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMBar(Bar *Bar)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMBar(Bar *Bar)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Bars = make(map[*Bar]struct{}, 0)
	stage.Bars_mapString = make(map[string]*Bar, 0)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Bars = nil
	stage.Bars_mapString = nil

}
