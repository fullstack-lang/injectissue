// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Foos           map[*Foo]struct{}
	Foos_mapString map[string]*Foo

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitFoo(foo *Foo)
	CheckoutFoo(foo *Foo)
	GetLastCommitNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Foos:           make(map[*Foo]struct{}, 0),
	Foos_mapString: make(map[string]*Foo, 0),

	// end of insertion point
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getFooOrderedStructWithNameField() []*Foo {
	// have alphabetical order generation
	fooOrdered := []*Foo{}
	for foo := range stage.Foos {
		fooOrdered = append(fooOrdered, foo)
	}
	sort.Slice(fooOrdered[:], func(i, j int) bool {
		return fooOrdered[i].Name < fooOrdered[j].Name
	})
	return fooOrdered
}

// Stage puts foo to the model stage
func (foo *Foo) Stage() *Foo {
	Stage.Foos[foo] = __member
	Stage.Foos_mapString[foo.Name] = foo

	return foo
}

// Unstage removes foo off the model stage
func (foo *Foo) Unstage() *Foo {
	delete(Stage.Foos, foo)
	delete(Stage.Foos_mapString, foo.Name)
	return foo
}

// commit foo to the back repo (if it is already staged)
func (foo *Foo) Commit() *Foo {
	if _, ok := Stage.Foos[foo]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitFoo(foo)
		}
	}
	return foo
}

// Checkout foo to the back repo (if it is already staged)
func (foo *Foo) Checkout() *Foo {
	if _, ok := Stage.Foos[foo]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutFoo(foo)
		}
	}
	return foo
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of foo to the model stage
func (foo *Foo) StageCopy() *Foo {
	_foo := new(Foo)
	*_foo = *foo
	_foo.Stage()
	return _foo
}

// StageAndCommit appends foo to the model stage and commit to the orm repo
func (foo *Foo) StageAndCommit() *Foo {
	foo.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMFoo(foo)
	}
	return foo
}

// DeleteStageAndCommit appends foo to the model stage and commit to the orm repo
func (foo *Foo) DeleteStageAndCommit() *Foo {
	foo.Unstage()
	DeleteORMFoo(foo)
	return foo
}

// StageCopyAndCommit appends a copy of foo to the model stage and commit to the orm repo
func (foo *Foo) StageCopyAndCommit() *Foo {
	_foo := new(Foo)
	*_foo = *foo
	_foo.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMFoo(foo)
	}
	return _foo
}

// CreateORMFoo enables dynamic staging of a Foo instance
func CreateORMFoo(foo *Foo) {
	foo.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMFoo(foo)
	}
}

// DeleteORMFoo enables dynamic staging of a Foo instance
func DeleteORMFoo(foo *Foo) {
	foo.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMFoo(foo)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMFoo(Foo *Foo)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMFoo(Foo *Foo)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Foos = make(map[*Foo]struct{}, 0)
	stage.Foos_mapString = make(map[string]*Foo, 0)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Foos = nil
	stage.Foos_mapString = nil

}
